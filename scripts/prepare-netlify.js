import { execSync } from "child_process";
import { existsSync, copyFileSync, mkdirSync, readdirSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ES –º–æ–¥—É–ª–µ
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Netlify...");

try {
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ production —Å–±–æ—Ä–∫–∏
  console.log("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ production —Å–±–æ—Ä–∫–∏...");
  execSync("npm run build", { stdio: "inherit" });

  // 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
  console.log("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ environment —Ñ–∞–π–ª–æ–≤...");

  // –ö–æ–ø–∏—Ä—É–µ–º .env –≤ dist –¥–ª—è Netlify
  const envFiles = [
    ".env",
    ".env.development",
    ".env.production",
    ".env.netlify",
  ];
  envFiles.forEach((file) => {
    const srcPath = join(__dirname, "..", file);
    const destPath = join(__dirname, "..", "dist", file);

    if (existsSync(srcPath)) {
      copyFileSync(srcPath, destPath);
      console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${file}`);
    }
  });

  // 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ netlify.toml –≤ dist
  const netlifyConfig = join(__dirname, "..", "netlify.toml");
  const distNetlifyConfig = join(__dirname, "..", "dist", "netlify.toml");

  if (existsSync(netlifyConfig)) {
    copyFileSync(netlifyConfig, distNetlifyConfig);
    console.log("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω netlify.toml");
  }

  // 4. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Netlify
  const functionsDir = join(__dirname, "..", "netlify", "functions");
  const distFunctionsDir = join(
    __dirname,
    "..",
    "dist",
    "netlify",
    "functions"
  );

  if (existsSync(functionsDir)) {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!existsSync(join(__dirname, "..", "dist", "netlify"))) {
      mkdirSync(join(__dirname, "..", "dist", "netlify"));
    }

    if (!existsSync(distFunctionsDir)) {
      mkdirSync(distFunctionsDir, { recursive: true });
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ñ—É–Ω–∫—Ü–∏–π
    const functionFiles = readdirSync(functionsDir);
    functionFiles.forEach((file) => {
      const srcPath = join(functionsDir, file);
      const destPath = join(distFunctionsDir, file);
      copyFileSync(srcPath, destPath);
      console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è ${file}`);
    });

    // –ö–æ–ø–∏—Ä—É–µ–º package.json –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    const functionsPackage = join(functionsDir, "package.json");
    const distFunctionsPackage = join(distFunctionsDir, "package.json");

    if (existsSync(functionsPackage)) {
      copyFileSync(functionsPackage, distFunctionsPackage);
      console.log("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω package.json –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π");
    }
  }

  console.log("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Netlify –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  console.log('üìÅ –ì–æ—Ç–æ–≤—ã–π –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ "dist"');
  console.log(
    "üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Netlify:"
  );
  console.log("   - MONGODB_URI");
  console.log("   - TELEGRAM_BOT_TOKEN");
  console.log("   - MAIN_ADMIN_IDS");
  console.log("   - VITE_API_URL");
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–µ–ø–ª–æ—é:", error.message);
  process.exit(1);
}
